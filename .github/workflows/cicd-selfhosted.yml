name: do-the-job

on:
  push:
    branches:
      - master

jobs:
  start-runner:
    name: Start EC2 Runner
    runs-on: ubuntu-latest
    outputs:
      ec2-instance-id: ${{ steps.start-ec2.outputs.instance-id }}
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Start EC2 Instance
        id: start-ec2
        run: |
          INSTANCE_ID=$(aws ec2 run-instances --image-id ami-0f9de6e2d2f067fca \
            --instance-type t3.micro --security-group-ids sg-04b81fc613de74b2a \
            --subnet-id subnet-089b826030629808d --key-name new-key \
            --query "Instances[0].InstanceId" --output text)
          echo "INSTANCE_ID=$INSTANCE_ID" >> $GITHUB_ENV

      - name: Wait for EC2 Instance to Start
        run: aws ec2 wait instance-running --instance-ids $INSTANCE_ID

      - name: Ensure EC2 Instance Is Fully Initialized
        run: |
          while true; do
            INSTANCE_STATE=$(aws ec2 describe-instance-status --instance-ids $INSTANCE_ID --query "InstanceStatuses[0].InstanceState.Name" --output text)
            SYSTEM_STATUS=$(aws ec2 describe-instance-status --instance-ids $INSTANCE_ID --query "InstanceStatuses[0].SystemStatus.Status" --output text)
            INSTANCE_STATUS=$(aws ec2 describe-instance-status --instance-ids $INSTANCE_ID --query "InstanceStatuses[0].InstanceStatus.Status" --output text)

            echo "Current State: $INSTANCE_STATE | System Status: $SYSTEM_STATUS | Instance Status: $INSTANCE_STATUS"

            if [[ "$INSTANCE_STATE" == "running" && "$SYSTEM_STATUS" == "ok" && "$INSTANCE_STATUS" == "ok" ]]; then
              echo "Instance is fully initialized!"
              break
            fi
            sleep 10
          done

  do-the-job:
    name: Run Tasks on the EC2 Runner
    needs: start-runner
    runs-on: self-hosted
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Install Dependencies
        run: |
          sudo apt update && sudo apt install -y unzip git repo

      - name: Install AWS CLI
        run: |
          curl -o awscliv2.zip "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip"
          unzip awscliv2.zip
          sudo ./aws/install
          aws --version || { echo "AWS CLI installation failed!"; exit 1; }

      - name: Setup GitHub Actions Runner
        run: |
          mkdir -p /home/ubuntu/actions-runner && cd /home/ubuntu/actions-runner
          curl -o actions-runner-linux-x64.tar.gz -L https://github.com/actions/runner/releases/download/v2.323.0/actions-runner-linux-x64-2.323.0.tar.gz
          tar xzf actions-runner-linux-x64.tar.gz
          sudo chown -R ubuntu:ubuntu /home/ubuntu/actions-runner
          sudo chmod -R 755 /home/ubuntu/actions-runner
          ./config.sh --url https://github.com/conveytopraveenkumar/cic-amino --token ${{ secrets.RUNNER_TOKEN }}
          ./run.sh || { echo "Runner execution failed!"; exit 1; }

      - name: Initialize AOSP Repo
        run: |
          mkdir -p /home/ubuntu/aosp && cd /home/ubuntu/aosp
          repo init -u https://android.googlesource.com/platform/manifest 2>&1 | tee /home/ubuntu/aosp/repo-init.log

      - name: Sync AOSP Repo
        run: |
          for i in {1..3}; do repo sync -c 2>&1 | tee -a /home/ubuntu/aosp/repo-sync.log && break || sleep 30; done
