name: Amino Composite Action
description: Sets up environment and launches EC2 instance
inputs:
  project_name:
    description: Project name
    required: true
  build_type:
    description: Build type (e.g., userdebug)
    required: true
  testing:
    description: Enable testing (yes/no)
    required: false
  manifest_url:
    description: URL of the manifest repository
    required: true
  build_commands:
    description: Commands for compilation
    required: true
  branch:
    description: Commands for compilation
    required: true
  self_hosted_pat:
    required: true
    type: string
  aws_access_key_id:
    required: true
    description: AWS Access Key ID
  aws_secret_access_key:
    required: true
    description: AWS Secret Access Key
outputs:
  instance_ip:
    description: Private IP of the launched instance
  instance_id:
    description: ID of the launched instance
  runner_name:
    description: Name of the self-hosted runner
    value: ${{ steps.env-setup.outputs.runner_name }}
runs:
  using: "composite"
  steps:
    - name: Configure AWS Credentials
      shell: bash
      run: |
        aws configure set aws_access_key_id ${{ inputs.aws_access_key_id }}
        aws configure set aws_secret_access_key ${{ inputs.aws_secret_access_key }}
        aws configure set region us-east-1
        
    - name: Fetch GitHub Runner Token
      id: get-token
      run: |
        RUNNER_TOKEN=$(curl -X POST -H "Authorization: Bearer ${{ inputs.self_hosted_pat }}" \
            -H "Accept: application/vnd.github+json" \
            https://api.github.com/repos/conveytopraveenkumar/cic-amino/actions/runners/registration-token | jq -r '.token')

        if [[ -z "$RUNNER_TOKEN" || "$RUNNER_TOKEN" == "null" ]]; then
            echo "Error: Runner token not retrieved!" | tee -a github-runner-setup.log
            exit 1
        fi

        echo "RUNNER_TOKEN=$RUNNER_TOKEN" >> $GITHUB_ENV
      shell: bash

    - name: Generate Runner Name
      id: env-setup
      run: |
        RUNNER_NAME="self-hosted-runner-$(date +%Y%m%d%H%M%S)"
        echo "RUNNER_NAME=$RUNNER_NAME" >> $GITHUB_ENV
        echo "runner_name=$RUNNER_NAME" >> $GITHUB_OUTPUT
      shell: bash

    - name: Prepare User Data Script
      run: |
        cat <<EOF > user-data.sh
        #!/bin/bash
        sudo apt update && sudo apt install -y unzip git curl jq awscli
        
        # Set up the GitHub Actions runner
        mkdir -p /home/ubuntu/actions-runner && cd /home/ubuntu/actions-runner
        sudo chown -R ubuntu:ubuntu /home/ubuntu/actions-runner
        sudo chmod -R 755 /home/ubuntu/actions-runner
        
        if [ -f /home/ubuntu/actions-runner/.env ]; then sudo chmod 644 /home/ubuntu/actions-runner/.env; fi
        if [ -f /home/ubuntu/actions-runner/.path ]; then sudo chmod 644 /home/ubuntu/actions-runner/.path; fi
    
        # Download and configure the GitHub Actions runner
        curl -o actions-runner-linux-x64.tar.gz -L https://github.com/actions/runner/releases/download/v2.323.0/actions-runner-linux-x64-2.323.0.tar.gz
        tar xzf ./actions-runner-linux-x64.tar.gz
        sudo chown -R ubuntu:ubuntu /home/ubuntu/actions-runner
    
        # Read the stored token dynamically
        RUNNER_TOKEN="${{ env.RUNNER_TOKEN }}"
        echo "Runner Token: $RUNNER_TOKEN"
    
        sudo chmod +x /home/ubuntu/actions-runner/config.sh
        sudo -u ubuntu ./config.sh --url https://github.com/conveytopraveenkumar/cic-amino --token "$RUNNER_TOKEN" \
        --name "self-hosted-runner-$(date +%Y%m%d%H%M%S)" --labels aws,ec2,linux,aosp-runner,android-build,oidc \
        --work /home/ubuntu/runner_work --runnergroup Default | tee -a /home/ubuntu/actions-runner/github-runner-setup.log
    
        sudo chmod +x /home/ubuntu/actions-runner/run.sh
        sudo chown ubuntu:ubuntu /home/ubuntu/actions-runner/run.sh
        sudo -u ubuntu nohup ./run.sh > runner.log 2>&1 &
        EOF
    
        chmod +x user-data.sh
      shell: bash
    - name: Launch EC2 Instance
      run: |
          SUBNET_ID=$(aws ec2 describe-subnets --query 'Subnets[0].SubnetId' --output text)
          INSTANCE_ID=$(aws ec2 run-instances \
            --image-id ami-0f9de6e2d2f067fca \
            --instance-type t3.micro \
            --security-group-ids sg-04b81fc613de74b2a \
            --subnet-id $SUBNET_ID \
            --key-name new-key \
            --associate-public-ip-address \
            --user-data file://user-data.sh \
            --tag-specifications "ResourceType=instance,Tags=[{Key=Name,Value=$RUNNER_NAME}]" \
            --query "Instances[0].InstanceId" --output text)
          INSTANCE_IP=$(aws ec2 describe-instances --instance-ids $INSTANCE_ID --query "Reservations[0].Instances[0].PublicIpAddress" --output text)
          echo "INSTANCE_IP=$INSTANCE_IP" >> $GITHUB_ENV
          echo "INSTANCE_ID=$INSTANCE_ID" >> $GITHUB_ENV
          echo "instance_ip=$INSTANCE_IP" >> $GITHUB_OUTPUT
          echo "instance_id=$INSTANCE_ID" >> $GITHUB_OUTPUT
      shell: bash
