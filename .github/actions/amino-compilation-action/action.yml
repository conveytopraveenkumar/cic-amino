name: Amino Compilation Action
description: Handles compilation process and launches EC2 instance
inputs:
  project_name:
    description: Project name
    required: true
  build_type:
    description: Build type (e.g., userdebug)
    required: true
  manifest_url:
    description: URL of the manifest repository
    required: true
  build_commands:
    description: Commands for compilation
    required: true
  branch:
    description: branch name 
    required: true
  runner_name:
    description: Self-hosted runner name
    required: true
  self_hosted_pat:
   required: true
   type: string
  aws_access_key_id:
   required: true
   description: AWS Access Key ID
  aws_secret_access_key:
   required: true
   description: AWS Secret Access Key
  githubtoken:
   required: true
   description: githubtoken
  awssshkey:
   required: true
   description: AWS SSH key
  
outputs:
  instance_ip:
    description: Private IP of the launched instance
  instance_id:
    description: ID of the launched instance
  build_status:
    description: Indicates whether the compilation was successful
runs:
  using: "composite"
  steps:
    - name: Configure AWS Credential  
      run: |
        aws configure set aws_access_key_id ${{ inputs.aws_access_key_id }}
        aws configure set aws_secret_access_key ${{ inputs.aws_secret_access_key }}
        aws configure set region us-east-1
      shell: bash
 
    - name: Validate Inputs
      run: |
        if [[ -z "${{ inputs.project_name }}" || -z "${{ inputs.build_type }}" || -z "${{ inputs.manifest_url }}"  || -z "${{ inputs.branch }}" || -z ${{ inputs.build_commands }} ]]; then
          echo "Error: Required inputs are missing."
          exit 1
        fi
      shell: bash

    - name: Launch EC2 Instance for Build
      id: launch-instance
      run: |
        INSTANCE_NAME="AOSP-Build-Instance-$(date +%Y%m%d%H%M%S)"
          SUBNET_ID=$(aws ec2 describe-subnets --query 'Subnets[0].SubnetId' --output text)
          INSTANCE_ID=$(aws ec2 run-instances --image-id ami-0f9de6e2d2f067fca \
            --count 1 --instance-type t3.micro \
            --key-name new-key \
            --security-group-ids sg-04b81fc613de74b2a \
            --subnet-id $SUBNET_ID \
            --tag-specifications "ResourceType=instance,Tags=[{Key=Name,Value=$INSTANCE_NAME}]" \
            --block-device-mappings '[{"DeviceName": "/dev/sda1", "Ebs": {"VolumeSize": 500, "DeleteOnTermination": true}}]' \
            --tag-specifications "ResourceType=instance,Tags=[{Key=Name,Value=$INSTANCE_NAME}]" \
            --query "Instances[0].InstanceId" --output text)
          echo "INSTANCE_ID=$INSTANCE_ID" >> $GITHUB_ENV

        INSTANCE_IP=$(aws ec2 describe-instances --instance-ids "$INSTANCE_ID" --query "Reservations[0].Instances[0].PrivateIpAddress" --output text)

        echo "INSTANCE_ID=$INSTANCE_ID" >> $GITHUB_ENV
        echo "INSTANCE_IP=$INSTANCE_IP" >> $GITHUB_ENV
        echo "instance_ip=$INSTANCE_IP" >> $GITHUB_OUTPUT
        echo "instance_id=$INSTANCE_ID" >> $GITHUB_OUTPUT
      shell: bash

    - name: Wait for EC2 Instance to Start
      run: aws ec2 wait instance-running --instance-ids $INSTANCE_ID
      shell: bash

    - name: Ensure EC2 Instance Is Fully Initialized
      run: |
        while true; do
          INSTANCE_STATE=$(aws ec2 describe-instance-status --instance-ids $INSTANCE_ID --query "InstanceStatuses[0].InstanceState.Name" --output text)
          SYSTEM_STATUS=$(aws ec2 describe-instance-status --instance-ids $INSTANCE_ID --query "InstanceStatuses[0].SystemStatus.Status" --output text)
          INSTANCE_STATUS=$(aws ec2 describe-instance-status --instance-ids $INSTANCE_ID --query "InstanceStatuses[0].InstanceStatus.Status" --output text)
          echo "Current State: $INSTANCE_STATE | System Status: $SYSTEM_STATUS | Instance Status: $INSTANCE_STATUS"
          if [[ "$INSTANCE_STATE" == "running" && "$SYSTEM_STATUS" == "ok" && "$INSTANCE_STATUS" == "ok" ]]; then
            echo "Instance is fully initialized!"
            break
          fi
          sleep 10
        done
      shell: bash

    - name: Setup SSH Key for EC2 Access
      run: |
        echo "${{ inputs.awssshkey }}" > private-key.pem
        chmod 600 private-key.pem
      shell: bash

    - name: Configure Swap Space
      run: |
        ssh -i private-key.pem -o StrictHostKeyChecking=no ubuntu@${INSTANCE_IP}<< "EOF"
          sudo fallocate -l 64G /swapfile
          sudo chmod 600 /swapfile
          sudo mkswap /swapfile
          sudo swapon /swapfile
          echo '/swapfile swap swap defaults 0 0' | sudo tee -a /etc/fstab
          sudo sysctl vm.swappiness=10
          echo 'vm.swappiness=10' | sudo tee -a /etc/sysctl.conf
        EOF
      shell: bash

    - name: Install Docker on EC2
      run: |
        ssh -i private-key.pem -o StrictHostKeyChecking=no ubuntu@${INSTANCE_IP}<< "EOF"
          sudo apt update && sudo apt install -y docker.io
          sudo usermod -aG docker ubuntu
          sudo systemctl restart docker
        EOF
      shell: bash
    - name: Authenticate with GitHub Container Registry
      run: |
        ssh -i private-key.pem -o StrictHostKeyChecking=no ubuntu@${INSTANCE_IP}<< EOF
        echo "$${{ inputs.githubtoken }}}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
        EOF
      shell: bash

    - name: Check and Use Prebuilt Docker Image
      run: |
        ssh -i private-key.pem -o StrictHostKeyChecking=no ubuntu@${INSTANCE_IP}<< "EOF"
          set -e  # Stop execution on failure
          echo "Checking if Docker image exists in GHCR..."
          
          docker pull ghcr.io/${{ github.repository_owner }}/aosp-build-docker:1.0 || IMAGE_NOT_FOUND="true"

          if [[ -z "$IMAGE_NOT_FOUND" ]]; then
            echo "✅ Docker image found in GHCR, running container..."
            docker run -d --name aosp-container --restart unless-stopped -v /home/ubuntu/aosp:/workspace ghcr.io/${{ github.repository_owner }}/aosp-build-docker:1.0
          else
            echo "⚠️ Docker image not found, building and pushing to GHCR..."
            mkdir -p /home/ubuntu/aosp && cd /home/ubuntu/aosp

            echo "FROM ubuntu:20.04" > Dockerfile
            echo "ENV DEBIAN_FRONTEND=noninteractive" >> Dockerfile
            echo "RUN apt update && apt install -y git curl python3 python3-pip openjdk-11-jdk wget unzip gcc g++ make libncurses5 libncurses5-dev bison flex gperf zip zlib1g-dev ccache lzop lsb-release sudo python-is-python3" >> Dockerfile
            
            # Configure timezone before installing tzdata
            echo "RUN ln -fs /usr/share/zoneinfo/Asia/Kolkata /etc/localtime" >> Dockerfile
            echo "RUN echo 'Asia/Kolkata' > /etc/timezone" >> Dockerfile
            echo "RUN apt update && apt install -y tzdata" >> Dockerfile
            echo "RUN dpkg-reconfigure --frontend noninteractive tzdata" >> Dockerfile
            echo "RUN apt update && sudo apt install -y ninja-build rsync awscli" >> Dockerfile
            
            # Install repo tool
            echo "RUN mkdir -p /usr/local/bin && curl -o /usr/local/bin/repo https://storage.googleapis.com/git-repo-downloads/repo" >> Dockerfile
            echo "RUN chmod a+x /usr/local/bin/repo && ln -s /usr/local/bin/repo /usr/bin/repo" >> Dockerfile
            
            echo "WORKDIR /workspace" >> Dockerfile
            echo "COPY entrypoint.sh /entrypoint.sh" >> Dockerfile
            echo "RUN chmod +x /entrypoint.sh" >> Dockerfile
            echo "ENTRYPOINT [\"/entrypoint.sh\"]" >> Dockerfile
            
            echo "#!/bin/bash" > entrypoint.sh
            echo "exec tail -f /dev/null" >> entrypoint.sh
            chmod +x entrypoint.sh

            echo "Building Docker image..."
            docker build -t ghcr.io/${{ github.repository_owner }}/aosp-build-docker:1.0 . || {
                echo "❌ Failed to build Docker image!"
                exit 1
            }

            echo "Pushing Docker image to GHCR..."
            docker push ghcr.io/${{ github.repository_owner }}/aosp-build-docker:1.0 && echo "✅ Image successfully pushed!"
            echo "Running newly built container..."
            docker run -d --name aosp-container --restart unless-stopped -v /home/ubuntu/aosp:/workspace ghcr.io/${{ github.repository_owner }}/aosp-build-docker:1.0
          fi
        EOF
      shell: bash
    - name: Ensure Log Directory Exists
      run: |
        ssh -i private-key.pem -o StrictHostKeyChecking=no ubuntu@${INSTANCE_IP} << EOF
          sudo mkdir -p /workspace/logs
          sudo chmod -R 777 /workspace
          sudo touch /workspace/logs/repo_sync.log
        EOF
      shell: bash
    - name: Repo Init & Sync
      run: |
        ssh -i private-key.pem -o StrictHostKeyChecking=no -o ServerAliveInterval=60 -o TCPKeepAlive=yes -o ConnectTimeout=30 ubuntu@${INSTANCE_IP}<< EOF
          docker exec aosp-container bash -c "
            rm -rf /workspace/.repo &&
            mkdir -p /workspace/logs
            echo 'Initializing repo...'
            repo init -u ${{ env.MANIFEST_URL }} -b ${{ env.BRANCH }}
            echo 'Syncing repo...'
            for i in {1..3}; do
              repo sync -c -j$(nproc) 2>&1 | tee /workspace/logs/repo_sync.log && break || sleep 10
            done
          "
        EOF
      shell: bash

    - name: Set Up Environment & Build AOSP
      run: |
        ssh -i private-key.pem -o StrictHostKeyChecking=no -o ServerAliveInterval=60 -o TCPKeepAlive=yes ubuntu@${INSTANCE_IP}<< "EOF"
          docker exec aosp-container bash -c "
            if [ ! -d /workspace/.repo ]; then
              echo 'Error: Repo sync may have failed. .repo directory not found.'
              exit 1
            fi

            if [ -f build/envsetup.sh ]; then
              # source build/envsetup.sh
              # lunch aosp_cf_x86_64_tv-${{ env.BUILD_TYPE }}
              ${{ env.BUILD_COMMANDS }} 2>&1 | tee /workspace/logs/build.log || {
                echo 'Error: AOSP build failed!'
                exit 1
              }
            else
              echo 'Error: build/envsetup.sh not found!'
              exit 1
            fi
          "
        EOF
      shell: bash

    - name: Set Build Number
      run: |
        echo "BUILD_NUMBER=$(date +%Y%m%d%H%M%S)" >> $GITHUB_ENV
      shell: bash

    - name: Upload Build Files to S3 with Build Number
      run: |
        ssh -i private-key.pem -o StrictHostKeyChecking=no -o ServerAliveInterval=60 -o TCPKeepAlive=yes -o ConnectTimeout=30 ubuntu@${INSTANCE_IP}<< "EOF"
          docker exec aosp-container bash -c "
            export AWS_ACCESS_KEY_ID=${{ inputs.aws_access_key_id }}
            export AWS_SECRET_ACCESS_KEY=${{ inputs.aws_secret_access_key }}
            export AWS_REGION=${{ env.AWS_REGION }}
            export BUILD_NUMBER=${{ env.BUILD_NUMBER }}

            aws configure set aws_access_key_id ${{ inputs.aws_access_key_id }}
            aws configure set aws_secret_access_key ${{ inputs.aws_secret_access_key }}
            aws configure set region us-east-1

            # Verify AWS Authentication
            aws sts get-caller-identity || { echo 'Error: AWS authentication failed!'; exit 1; }

            # Upload Build Files to S3
            cd /workspace/out/dist/
            aws s3 cp cvd-host_package.tar.gz s3://AMINO_CICD_RELEASES/${{ env.PROJECTNAME }}/${{ env.BUILD_TYPE }}/build_\$BUILD_NUMBER/
            aws s3 cp aosp_cf_x86_64_tv-img-eng.root.zip s3://AMINO_CICD_RELEASES/${{ env.PROJECTNAME }}/${{ env.BUILD_TYPE }}/build_\$BUILD_NUMBER/
            echo 'Build files uploaded successfully!'
          "
        EOF
      shell: bash
