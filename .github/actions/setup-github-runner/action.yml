name: "Setup GitHub Runner"
description: "Registers an EC2 instance as a self-hosted runner using AWS SSM"

inputs:
  instance_id:
    required: true
    type: string
  self_hosted_pat:
    required: true
    type: string
  aws_access_key_id:
    required: true
    type: string
  aws_secret_access_key:
    required: true
    type: string

outputs:
  runner_name:
    description: "Self-hosted Runner Name"
    value: ${{ env.RUNNER_NAME }}

runs:
  using: "composite"
  steps:
    - name: Set Up AWS CLI Credentials
      run: |
        export AWS_ACCESS_KEY_ID=${{ inputs.aws_access_key_id }}
        export AWS_SECRET_ACCESS_KEY=${{ inputs.aws_secret_access_key }}
        export AWS_DEFAULT_REGION="us-east-1"
      shell: bash

    - name: Fetch GitHub Runner Token
      id: get-token
      run: |
        RUNNER_TOKEN=$(curl -X POST -H "Authorization: Bearer ${{ inputs.self_hosted_pat }}" \
        -H "Accept: application/vnd.github+json" \
        https://api.github.com/repos/conveytopraveenkumar/cic-amino/actions/runners/registration-token | jq -r '.token')
        echo "RUNNER_TOKEN=$RUNNER_TOKEN" >> $GITHUB_ENV
      shell: bash

    - name: Start AWS SSM Session
      run: |
        INSTANCE_ID=${{ needs.launch-ec2.outputs.instance_id }}
        echo "Starting SSM session for instance ID: $INSTANCE_ID"
        
        # Ensure the instance ID is not empty
        if [ -z "$INSTANCE_ID" ]; then
          echo "Instance ID is not set properly!"
          exit 1
        fi
        
        # Start the SSM session
        SESSION_ID=$(aws ssm start-session --target "$INSTANCE_ID" --region us-east-1)
        
        if [ $? -eq 0 ]; then
          echo "SSM session started successfully with ID: $SESSION_ID"
        else
          echo "Failed to start SSM session"
          exit 1
        fi
      shell: bash

    - name: Install AWS CLI via SSM on EC2
      run: |
        COMMAND_ID=$(aws ssm send-command \
          --document-name "AWS-RunShellScript" \
          --targets '[{"Key":"InstanceIds","Values":["${{ inputs.instance_id }}"]}]' \
          --parameters '{"commands":["if command -v aws > /dev/null; then echo \"âœ… AWS CLI is installed.\"; else",
                                     "sudo apt update && sudo apt install -y awscli",
                                     "aws --version",
                                     "fi"]}' \
          --region us-east-1 \
          --query "Command.CommandId" --output text)
      
        echo "Waiting for AWS CLI installation..."
        aws ssm wait command-executed --instance-id "${{ inputs.instance_id }}" --command-id "$COMMAND_ID"
      shell: bash

    - name: Install SSM Agent via AWS SSM on EC2
      run: |
        COMMAND_ID=$(aws ssm send-command \
          --document-name "AWS-RunShellScript" \
          --targets '[{"Key":"InstanceIds","Values":["${{ inputs.instance_id }}"]}]' \
          --parameters '{"commands":["sudo apt update && sudo apt install -y amazon-ssm-agent",
                                     "sudo systemctl enable amazon-ssm-agent",
                                     "sudo systemctl start amazon-ssm-agent",
                                     "amazon-ssm-agent --version | tee /home/ubuntu/ssm-install.log"]}' \
          --region us-east-1 \
          --query "Command.CommandId" --output text)
      
        echo "Waiting for SSM Agent installation..."
        aws ssm wait command-executed --instance-id "${{ inputs.instance_id }}" --command-id "$COMMAND_ID"
      shell: bash

    - name: Verify SSM Agent Installation
      run: |
        aws ssm send-command \
          --document-name "AWS-RunShellScript" \
          --targets '[{"Key":"InstanceIds","Values":["${{ inputs.instance_id }}"]}]' \
          --parameters '{"commands":["cat /home/ubuntu/ssm-install.log"]}' \
          --region us-east-1
      shell: bash

    - name: Setup and Configure GitHub Runner Using SSM
      run: |
        COMMAND_ID=$(aws ssm send-command \
          --document-name "AWS-RunShellScript" \
          --targets '[{"Key":"InstanceIds","Values":["${{ inputs.instance_id }}"]}]' \
          --parameters '{"commands":[
            "export DEBIAN_FRONTEND=noninteractive",
            "sudo apt-get update -yq",
            "sudo apt-get install -yq unzip git curl jq awscli",
            "mkdir -p /home/ubuntu/actions-runner && cd /home/ubuntu/actions-runner",
            "touch /home/ubuntu/actions-runner/ssm-command.log",
            "sudo chown -R ubuntu:ubuntu /home/ubuntu/actions-runner",
            "sudo chmod -R 755 /home/ubuntu/actions-runner",
            "curl -o actions-runner-linux-x64.tar.gz -L https://github.com/actions/runner/releases/download/v2.323.0/actions-runner-linux-x64-2.323.0.tar.gz",
            "tar xzf actions-runner-linux-x64.tar.gz",
            "sudo chown -R ubuntu:ubuntu /home/ubuntu/actions-runner",
            "sudo chmod +x /home/ubuntu/actions-runner/config.sh",
            "sudo -u ubuntu ./config.sh --url https://github.com/conveytopraveenkumar/cic-amino --token \"${{ env.RUNNER_TOKEN }}\" --name \"${{ env.RUNNER_NAME }}\" --labels aws,ec2,linux,aosp-runner,android-build --work /home/ubuntu/runner_work --runnergroup Default > /home/ubuntu/actions-runner/github-runner-setup.log 2>&1",
            "sudo chmod +x /home/ubuntu/actions-runner/run.sh",
            "sudo chown ubuntu:ubuntu /home/ubuntu/actions-runner/run.sh",
            "sudo -u ubuntu nohup ./run.sh > /home/ubuntu/actions-runner/runner.log 2>&1 &",
            "sleep 10",
            "ps aux | grep actions-runner > /home/ubuntu/actions-runner/runner-process.log"
          ]}' \
          --region us-east-1 \
          --query "Command.CommandId" --output text)
      
        echo "Waiting for runner setup..."
        aws ssm wait command-executed --instance-id "${{ inputs.instance_id }}" --command-id "$COMMAND_ID"
      
        echo "Fetching logs..."
        aws ssm get-command-invocation \
          --command-id "$COMMAND_ID" \
          --instance-id "${{ inputs.instance_id }}" \
          --region us-east-1 \
          --output text
      shell: bash
